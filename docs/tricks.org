#+TITLE: /Tips and tricks/ para programação competitiva
#+STARTUP: nofold

Coleção de algumas anotações com informações úteis para resolução de problemas
típicos de programação competitiva.

* Índice :TOC:
- [[#boas-práticas][Boas práticas]]
- [[#valores-importantes][Valores importantes]]
- [[#divisão-por-0][Divisão por 0]]
- [[#limites-numéricos][Limites numéricos]]
- [[#c-strings][C Strings]]
- [[#ordenação][Ordenação]]
- [[#vetores][Vetores]]
  - [[#criação-e-inicialização-de-vetores-dinamicamente][Criação e inicialização de vetores dinamicamente]]
  - [[#criação-e-inicialização-de-vetores-estaticamente][Criação e inicialização de vetores estaticamente]]
- [[#entrada-e-saída][Entrada e saída]]
  - [[#arquivos][Arquivos]]
  - [[#leitura-de-char-e-string][Leitura de char e string]]
- [[#funções-úteis][Funções úteis]]
  - [[#binary_search][binary_search()]]
  - [[#lower_bound][lower_bound()]]
  - [[#upper_bound][upper_bound()]]
  - [[#find][find()]]
  - [[#distance][distance()]]
  - [[#reverse][reverse()]]
  - [[#begin-e-end][begin() e end()]]

* Boas práticas
- Verificar primeiramente a complexidade do algoritmo proposto como solução.
  Soluções com complexidade alta muitas vezes precisam ser descartadas antes
  perder tempo implementando.
- Usar sempre os valores máximos fornecidos no enunciado. Especialmente útil
  para criar vetores sem a necessidade de alocar memória dinamicamente.
- Fabricar casos de teste com valores conhecidos para averiguar a validade da
  solução implementada.
- Tentar identificar os /edge cases/ e testar a implementação contra eles.
  

* Valores importantes
-  Um inteiro de 32 bits consegue guardar valores de até (aproximadamente)
  $2*10^9$.
-  Um computador comum consegue seguramente fazer algo em torno de $10^8$
  operações por segundo.

  
* Divisão por 0
Utilização da função *max()* da biblioteca *<algorithm>*

#+BEGIN_SRC C++
x = y / max(1, n);
#+END_SRC

Em caso de n igual a zero, a função *max()* retorna o maior valor 1, efetuando uma divisão por 1.


* Limites numéricos
Para obter os valores máximos e mínimos de uma variável, têm-se
*numeric_limits<class T>* da biblioteca *<limits>*.

#+BEGIN_SRC C++
std::numeric_limits<int>::max();
std::numeric_limits<int>::min();
#+END_SRC


* C Strings
- Antes de ler uma string à moda da linguagem C, é preciso garantir que não
  exista nada no buffer que possa atrapalhar:

#+BEGIN_SRC C++
scanf("%d", &x); // Lê apenas o valor inteiro, o '\n' continua no buffer
getchar(); // Lê e descarta o '\n' que estava no buffer
scanf("%s", str); // Lê a string
#+END_SRC

- Ler strings com *fgets()* inclui o '\n'. Normalmente é preciso removê-lo:

#+BEGIN_SRC C++
fgets(str, MAX, stdin); // Lê a string do stdin e, se houver espaço, o caractere '\n' será inserido ao final
// IMPORTANTE: O método a seguir pode remover informação relevante se o tamanho da string for equivalente a MAX
// Isso se dá pelo fato de que nesse caso, não há espaço para o caractere '\n' na string
str[strlen(str)-1] = '\0';
#+END_SRC


* Ordenação
Para realizar ordenações de algum objeto da STL, pode-se utilizar a função
*sort()* da biblioteca *<algorithm>*

#+BEGIN_SRC C++
std::sort(v.begin(), v.end()) // Ordenação crescente
std::sort(v.begin(), v.end(), std::greater<int>()) // Ordenação decrescente
#+END_SRC

* Vetores
** Criação e inicialização de vetores dinamicamente
Caso comum, reservando memória sem alterá-la:

#+begin_src c++
int arr = (int*) malloc(N * sizeof(int));
#+end_src


Inicializar um vetor zerado:

#+begin_src c++
int arr = (int*) calloc(N, sizeof(int));
#+end_src

** Criação e inicialização de vetores estaticamente

Não é necessário inicializar todas as posições individualmente. Pode-se fazer:

#+begin_src c++
int arr[N] = {0}; // Cria um array zerado.
memset(arr, 0, N); // Zera todas as posições do array.
#+end_src

* Entrada e saída
** Arquivos
Para ler de e escrever para arquivos ao invés de /stdin/ , /stdout/ e /stderr/, têm-se:

#+begin_src c++
freopen("input.txt", "r", stdin);
freopen("output.txt", "w", stdout);
freopen("error.log", "w", stderr);
#+end_src

** Leitura de char e string
Para evitar problemas com a leitura de tabulações/espaços e '\n' indesejados, pode-se usar um espaço no scanf:

#+begin_src c++
scanf(" %c", &ch);
#+end_src

* Funções úteis
** binary_search()
Retorna true se encontrar o valor no container e falso caso contrário. A implementação não retorna a posição do elemento, apenas indica se ele existe no range
ou não.
** lower_bound()
Retorna um iterador para o primeiro elemento maior ou igual /val/. Se o elemento existe no container, isso é efetivamente uma maneira de encontrar seu índice rapidamente
** upper_bound()
Parecido com lower_bound(), mas retorna um iterador para o primeiro elemento *maior* que /val/.
** find()
Retorna um iterador para o primeiro elemento encontrado com valor correspondente dentro do intervalo.
** distance()
Comumente usado em conjunto com *find()*. Retorna a distância entre dois iteradores. Útil para descobrir o índice de um elemento a partir de seu iterador.
** reverse()
Inverte a ordem dos elementos de um container.
** begin() e end()
Retorna um iterador para cada posição do container e/ou vetor. Especialmente útil para permitir a utilização das funções citadas acima em arrays comuns (C).
